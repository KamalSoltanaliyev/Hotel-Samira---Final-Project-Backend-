@{
    ViewData["Title"] = "Rooms";
}
@model HomeViewModel

<link href="https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css" rel="stylesheet" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Arapey:ital@0;1&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="~/assets/css/rooms.css" />
<link rel="stylesheet" href="~/assets/css/index.css">

<style>
    .nav {
        display: flex;
        align-items: center;
        position: relative;
    }

    .quantity {
        margin-left: 5px;
        background-color: #ac9c8d;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 12px;
        font-weight: bold;
    }

    .cart-content {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .cart-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px;
    }

    .cart-img {
        width: 100px;
        height: 80px;
        object-fit: cover;
    }

    .detail-box {
        flex-grow: 1;
        margin-left: 10px;
    }

    .cart-product-title {
        font-size: large;
        font-weight: bold;
    }

    .cart-price {
        font-size: medium;
    }
</style>

<div class="bag">
    <div class="nav container">
        <i class="bx bx-shopping-bag" id="cart-icon"></i>
        <span class="quantity" id="basket-count">@Model.BasketItems.Count</span>
        <div class="cart">
            <h2 class="cart-title">Your Cart</h2>
            <div class="cart-content">
                <div id="basket-items">
                    @foreach (var item in Model.BasketItems)
                    {
                        <div class="cart-box" id="basket-item-@item.Product.Id">
                            <img src="~/assets/images/@item.Product.Images.FirstOrDefault(i => i.Image != null).Image" alt="" class="cart-img">
                            <div class="detail-box">
                                <div class="cart-product-title">@item.Product.Title</div>
                                <div class="cart-price">$@item.Product.Price/night</div>
                                <input style="display: none;" type="number" value="1" class="cart-quantity">
                            </div>
                            <!-- REMOVE CART  -->
                            <i class='bx bxs-trash-alt cart-remove' data-product-id="@item.Product.Id"></i>
                        </div>
                    }
                </div>
            </div>
            <div class="total">
                <div class="total-title">Total</div>
                <div class="total-price">$@Model.TotalPrice</div>
            </div>
            <i class="bx bx-x" id="cart-close"></i>
        </div>
    </div>
</div>

<section class="availability">
    <form method="post" asp-action="Filter">
        <div class="box">
            <p>Check In <span>*</span></p>
            <input type="date" class="input" name="CheckIn" />
        </div>
        <div class="box">
            <p>Check Out <span>*</span></p>
            <input type="date" class="input" name="CheckOut" />
        </div>
        <div class="box">
            <p>Adults <span>*</span></p>
            <select name="Adults" class="input">
                @for (int i = 1; i <= 6; i++)
                {
                    <option value="@i">@i adults</option>
                }
            </select>
        </div>
        <div class="box">
            <p>Children <span>*</span></p>
            <select name="Children" class="input">
                @for (int i = 1; i <= 6; i++)
                {
                    <option value="@i">@i child</option>
                }
            </select>
        </div>
        <div class="box">
            <p>Rooms <span>*</span></p>
            <select name="Rooms" class="input">
                @for (int i = 1; i <= 6; i++)
                {
                    <option value="@i">@i rooms</option>
                }
            </select>
        </div>
        <div class="box">
            <p>Room Type <span>*</span></p>
            <select name="RoomType" class="input">
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Name">@category.Name</option>
                }
            </select>
        </div>
        <input type="submit" value="check availability" class="btn" />
    </form>
</section>




<section class="shop container">
    <h2 class="section-title">Our Rooms</h2>
    <div class="shop-content" id="productBox">
        @foreach (var product in Model.Products)
        {
            <div class="product-box">
                @if (product.Images.FirstOrDefault(i => i.Image != null) != null)
                {
                    <a asp-controller="Product" asp-action="ProductDetail" asp-route-id="@product.Id">
                        <img src="~/assets/images/@product.Images.FirstOrDefault(i => i.Image != null).Image" alt="" class="product-img" />
                    </a>
                }
                <div class="stars">
                    @{
                        int fullStars = (int)Math.Floor(product.Rating);
                        bool hasHalfStar = product.Rating - fullStars >= 0.5;
                        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                    }

                    @for (var i = 0; i < fullStars; i++)
                    {
                        <i class="fas fa-star"></i>
                    }
                    @if (hasHalfStar)
                    {
                        <i class="fas fa-star-half-alt"></i>
                    }
                    @for (var i = 0; i < emptyStars; i++)
                    {
                        <i class="far fa-star"></i>
                    }
                </div>
                <h2 class="product-title">@product.Title</h2>
                <span class="product-price">$@product.Price/night</span>
                <a href="@Url.Action("AddProductToBasket", "Rooms", new { productId = product.Id })" class="add-to-basket">
                    <i class="fas fa-shopping-cart add-cart"></i>
                </a>
            </div>
        }
    </div>
    <div class="load-more-wrapper" id="loadMore">
        <button style="margin-top: 66px;" class="btn" id="loadMoreBtn">Load More</button>
    </div>
</section>

<script src="~/assets/js/rooms.js"></script>

@section Scripts{
    <script src="~/backend/js/script.js"></script>
}

<script>
    const loadMoreBtn = document.getElementById("loadMoreBtn");
    const productBox = document.getElementById("productBox");
    const addToBasketBtns = document.querySelectorAll(".add-to-basket");
    const basketItems = document.getElementById("basket-items");
    const basketCount = document.getElementById("basket-count");

    let skip = 6;

    function setupAddToBasketButtons() {
        const addToBasketBtns = document.querySelectorAll('.add-to-basket');

        addToBasketBtns.forEach(addToBasketBtn => {
            addToBasketBtn.addEventListener("click", function (e) {
                e.preventDefault();

                let url = this.getAttribute("href");
                fetch(url, {
                    method: "POST",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId: this.dataset.productId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            basketItems.innerHTML = data.basketItems.map(item => `
                                    <img src=~/assets/images/${item.Product.Images[0].Image} alt="" class="cart-img">
                                    <div class="detail-box">
                                        <div class="cart-product-title">${item.Product.Title}</div>
                                        <div class="cart-price">$${item.Product.Price}/night</div>
                                        <input style="display: none;" type="number" value="1" class="cart-quantity">
                                    </div>
                                    <!-- REMOVE CART  -->
                                    <i class='bx bxs-trash-alt cart-remove'></i>
                                `).join('');

                            basketCount.textContent = data.basketItems.length;
                        } else {
                            alert(data.message);
                        }
                    });
            });
        });
    }

    // Call the function initially to set up event listeners
    setupAddToBasketButtons();

    loadMoreBtn.addEventListener("click", function () {
        let url = `/Rooms/LoadMore?skip=${skip}`;

        fetch(url).then(response => response.text())
            .then(data => {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = data;

                while (tempDiv.firstChild) {
                    productBox.appendChild(tempDiv.firstChild);
                }

                skip += 6;

                if (!data.trim()) {
                    loadMoreBtn.style.display = 'none';
                }
                
                setupAddToBasketButtons();
            });
        
    });

   

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const basketItems = document.getElementById("basket-items");
        const basketCount = document.getElementById("basket-count");

        basketItems.addEventListener("click", function (e) {
            if (e.target.classList.contains("cart-remove")) {
                const productId = e.target.getAttribute("data-product-id");
                removeProductFromBasket(productId);
            }
        });

        function removeProductFromBasket(productId) {
            fetch(`/Rooms/RemoveProductFromBasket?productId=${productId}`, {
                method: "POST",
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const itemElement = document.getElementById(`basket-item-${productId}`);
                        if (itemElement) {
                            itemElement.remove();
                        }
                        const currentCount = parseInt(basketCount.textContent);
                        basketCount.textContent = currentCount - 1;
                    } else {
                        alert(data.message);
                    }
                });
        }
    });
</script>

